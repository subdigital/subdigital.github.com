<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Fickle Bits</title>
  <link href="http://benscheirman.com/atom.xml" rel="self"/>
  <link href="http://benscheirman.com/"/>
  <updated>2011-08-26T09:04:27-05:00</updated>
  <id>http://benscheirman.com/</id>
  <author>
    <name>Ben Scheirman</name>
    
  </author>

  
  <entry>
    <title>Vim - Could Not Invoke JSLint</title>
    <link href="http://benscheirman.com/blog/2011/08/26/vim---could-not-invoke-jslint/"/>
    <updated>2011-08-26T08:59:00-05:00</updated>
    <id>http://benscheirman.com/blog/2011/08/26/vim---could-not-invoke-jslint</id>
    <content type="html">&lt;p&gt;If you're running MacVim with Janus and have upgraded to Lion, you may
have noticed a little error when you open JavaScript files:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Error detected while processing function 87_JSLint:
Line 33:
could not invoke JSLint!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It seems many are having &lt;a href=&quot;https://github.com/hallettj/jslint.vim/issues/13&quot;&gt;this issue&lt;/a&gt;.  There are 2 things to check:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make sure you have Node in your path.  Confirm this by typing &lt;code&gt;which
node&lt;/code&gt; and make sure it resolves a binary somewhere on your system.&lt;/li&gt;
&lt;li&gt;Open up your &lt;code&gt;~/.vimrc.local&lt;/code&gt; and add this command:&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;```vim&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot; Use Node.js for JavaScript interpretation
let $JS_CMD='node'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Kudos to &lt;a href=&quot;http://github.com/eventualbuddha&quot;&gt;eventualbuddha&lt;/a&gt; for
figuring this out.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Is Rails Exempt?</title>
    <link href="http://benscheirman.com/blog/2011/08/26/is-rails-exempt-from-software-principles/"/>
    <updated>2011-08-26T07:58:00-05:00</updated>
    <id>http://benscheirman.com/blog/2011/08/26/is-rails-exempt-from-software-principles</id>
    <content type="html">&lt;p&gt;If you've been following the Ruby community recently, you'd notice that
there's are people calling our Rails (and Rails developers) for treating
Rails as if it is somehow &lt;em&gt;exempt&lt;/em&gt; from long-standing software
principles.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://osherove.com/&quot;&gt;Roy Osherove&lt;/a&gt;, a fairly well-known .NET developer and author of The &lt;a href=&quot;http://artofunittesting.com/&quot;&gt;Art of Unit Testing&lt;/a&gt;, ventured into Ruby-land
recently and commented on twitter about how Rails's
definition of unit &amp;amp; integration is quite different from his.&lt;/p&gt;

&lt;p&gt;&lt;img class='tweet ' src='http://benscheirman.com/images/rails-unit-integration-tweet.png' width='' height='' alt='' title=''&gt;&lt;/p&gt;

&lt;p&gt;I have to agree with Roy. Those in the TDD camp in .NET understood the
difference and were (from my experience) fairly cognizent of isolating
concerns and not mixing the 2 concepts. Some even go as far as to
isolate integration tests into their own assembly, providing a physical
separation further guaranteeing that a unit test project won't touch
web services or the database.&lt;/p&gt;

&lt;p&gt;It's easy to assume from the outside that the Rails is just testing
nirvana and that &lt;em&gt;everyone&lt;/em&gt; does it and it's so easy.  Unfortunately it's
just not the truth.  Rails (and Ruby) make testing really easy but that
means it's even easier to do the wrong thing as well.&lt;/p&gt;

&lt;h2&gt;Legacy Rails Apps&lt;/h2&gt;

&lt;p&gt;Now that Rails is (gasp) over 7 years old you're starting to see some
real legacy Rails applications out in the wild.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://twitter.com/avdi&quot;&gt;Avdi Grimm&lt;/a&gt; has a &lt;a href=&quot;http://avdi.org/devblog/2011/08/22/your-code-is-my-hell/&quot;&gt;good post&lt;/a&gt; on the topic of how many of the Rails apps he comes to work on are in poor shape, technically.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Here are a few examples, just to give you an idea of what I’m talking about:&lt;/p&gt;

&lt;p&gt;“Design Patterns are a Java thing. In Ruby you just write code.”&lt;/p&gt;

&lt;p&gt;“The warnings Ruby produces are dumb; just disable them.”&lt;/p&gt;

&lt;p&gt;“Sure they aren’t technically Unit Tests, but isolating objects turned out to be kind of hard and besides nobody else is doing it.”&lt;/p&gt;

&lt;p&gt;“Stuff like the Law of Demeter isn’t really as important in Ruby code”&lt;/p&gt;

&lt;p&gt;“That’s only a problem in large projects” (implying that this project will never become large).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I've certainly been guilty of some of this. Rails makes it easy to do
things that can turn out to be problematic. As with anything, you have
to be disciplined to notice the warning signs and act accordingly.&lt;/p&gt;

&lt;p&gt;When testing is painful, you're likely making mistakes. Some common
pain-points that I've experienced are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No tests - the app is hard to test because the design is poor. Classes
are too tightly coupled and don't have clear delineation of
responsibilities.&lt;/li&gt;
&lt;li&gt;Tests break for unrelated reasons - the tests are covering too much
behavior, so when a single behavior changes, many tests break.&lt;/li&gt;
&lt;li&gt;Tests break when implementation changes - the tests are probably
utilizing too much mocking &amp;amp; stubbing. The tests are coupled heavily
to a particular implementation.&lt;/li&gt;
&lt;li&gt;Unclear what the problem is when a test breaks - Tests are probably
too coarse-grained and may contain too many assertions per test.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;These are just a sampling of what I've personally observed.&lt;/p&gt;

&lt;p&gt;So why do many Rails developers ignore these concepts?&lt;/p&gt;

&lt;h2&gt;Pragmatism at work&lt;/h2&gt;

&lt;p&gt;Many rails tutorials (and the default Rails template) treats model tests
as &lt;em&gt;unit&lt;/em&gt; tests. Since Rails models are by default based on Active
Record, they have data access baked into their core.  Doing proper unit
testing means you're testing a logical unit.  If your test involves a
model operation that requires a database round-trip, that's technically
an &lt;em&gt;integration&lt;/em&gt; test.  But does it really matter?&lt;/p&gt;

&lt;p&gt;Most Rails developers will tell you no. Consider this spec:&lt;/p&gt;

&lt;p&gt;```ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe Post do
  it &quot;should be initially unpublished&quot; do
    Post.new.published.should == false
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;This is a unit test. It tests a single piece of functionality and will
fail for just one reason.&lt;/p&gt;

&lt;p&gt;Now, here's another example:&lt;/p&gt;

&lt;p&gt;```ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;it &quot;should fetch published articles&quot; do
  # ?
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;```ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# post.rb
class Post &amp;lt; ActiveRecord::Base
  def self.published
    where(&quot;published_at &amp;lt;= ?&quot;, Time.now)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;How should you implement this spec?&lt;/p&gt;

&lt;p&gt;If you were trying to avoid hitting the database you might intercept the
&lt;code&gt;where&lt;/code&gt; call and assert the parameters passed to it. But surely this
isn't the only way you could implement this method giving the same
behavior.  You might use &lt;code&gt;scopes&lt;/code&gt; or another &lt;code&gt;where&lt;/code&gt; call might actually
be added later that doesn't affect the outcome of this method in any way
that this test is concerned about.&lt;/p&gt;

&lt;p&gt;```ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;it &quot;should fetch published articles&quot; do
  3.times { Factory.create :article }
  future_post = Factory.create :article, :published_at =&amp;gt; 2.days.from_now
  posts = Post.published
  posts.size.should == 3
  post.should_not include future_post
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;This test hits the database (numerous times, in fact) but it's testing
&lt;em&gt;exactly&lt;/em&gt; the behavior we need.  We aren't testing implementation, we're
testing that the behavior works as intended.  If we somehow muck with
the query, breaking it, this test will fail.  If we change the
implementation to use some other query means (scopes or whatever) this
test will still pass.&lt;/p&gt;

&lt;p&gt;Is it so bad that the test hits the database?&lt;/p&gt;

&lt;p&gt;There are drawbacks of course:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The test requires a database, thus you have to migrate&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;database_cleaner&lt;/code&gt; gem will have to be present to clean out the
database before each run&lt;/li&gt;
&lt;li&gt;These database statements make the test suite a LOT slower, so large
test suites will eventually suffer.&lt;/li&gt;
&lt;li&gt;The tests could fail if the database isn't present (or migrated), or
if the query is incorrect.  But this isn't likely to happen since
we're using a tested framework (ActiveRecord).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Ultimately this isn't really a unit test at all.  It's an integration
test.  So is &lt;code&gt;spec/models/post_spec.rb&lt;/code&gt; the wrong place for this stuff?&lt;/p&gt;

&lt;p&gt;The question eventually comes down to this: &lt;em&gt;What is more valuable?  A
fast, isolated test suite?  Or a test suite that breaks for the right
reasons?&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Don't throw out good practices just because it's Ruby&lt;/h2&gt;

&lt;p&gt;I think it's important to be cognizant of software paradigms and use
them where they make sense. It's also important to recognize when
practices are being ignored because &quot;celebrities&quot; aren't touting them.&lt;/p&gt;

&lt;p&gt;It is still valuable, however, to keep a fresh eye on old assumptions. Don't
always take things as gospel just because that's the way they have
always been. One
of the things I love about the Ruby community is how willing people are
to rock the boat &amp;amp; try something new.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>When viewWillAppear: Isn't Called</title>
    <link href="http://benscheirman.com/blog/2011/08/24/when-viewwillappear-isnt-called/"/>
    <updated>2011-08-24T10:11:00-05:00</updated>
    <id>http://benscheirman.com/blog/2011/08/24/when-viewwillappear-isnt-called</id>
    <content type="html">&lt;p&gt;The &lt;code&gt;UIViewController&lt;/code&gt; lifecycle is pretty simple.  &lt;code&gt;viewDidLoad&lt;/code&gt; is
called when the view is loaded (usually from a XIB) and when the view
controller's view is about to be displayed &lt;code&gt;viewWillAppear:&lt;/code&gt; gets called
(and &lt;code&gt;viewWillDisappear:&lt;/code&gt; when it goes away).&lt;/p&gt;

&lt;p&gt;The problem is, when you have a non-standard view hierarchy (like my
current app) these methods don't get called. The Apple docs have this to
say about the problem:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Warning: If the view belonging to a view controller is added to a view hierarchy directly, the view controller will not receive this message. If you insert or add a view to the view hierarchy, and it has a view controller, you should send the associated view controller this message directly. Failing to send the view controller this message will prevent any associated animation from being displayed.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In my application I have a persistent bar at the bottom of the screen,
so my &lt;code&gt;UINavigationController&lt;/code&gt; only owns a portion of the screen.  Thus, my
&lt;code&gt;RootViewController&lt;/code&gt; (which owns these 2 portions) is always &lt;em&gt;active&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class='screenshot ' src='http://benscheirman.com/images/non-standard-nav-frame.png' width='' height='' alt='' title=''&gt;&lt;/p&gt;

&lt;p&gt;I recently came upon a requirement that needed to leverage
&lt;code&gt;viewWillAppear:&lt;/code&gt; and &lt;code&gt;viewWillDisappear:&lt;/code&gt; in order to decorate the
bottom bar with some additional information. Since this is a view
controller a few layers deep in the hierarchy, the methods weren't being
called.&lt;/p&gt;

&lt;p&gt;Luckly, there is a fix to this. The navigation controller can notify
its &lt;code&gt;delegate&lt;/code&gt; when it changes view controllers.&lt;/p&gt;

&lt;p&gt;Start off in the view controller that is the root of the navigation
controller hierarchy.  Make it conform to the
&lt;code&gt;UINavigationControllerDelegate&lt;/code&gt; protocol.  We'll also need an ivar to
store the last view controller that &lt;em&gt;appeared&lt;/em&gt; so that we can notify
when it &lt;em&gt;disappears&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;```objc&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface MyRootViewController : UIViewController
    &amp;lt;UINavigationControllerDelegate&amp;gt; {
      UIViewController *_lastViewController;
}
// methods

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;In the implementation, in do the following:&lt;/p&gt;

&lt;p&gt;```objc&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@implementation MyRootViewController

// other stuff

- (void)viewDidLoad {
    [super viewDidLoad];

    self.navigationController.delegate = self;
    // ...
}

- (void)navigationController:(UINavigationController *)navigationController 
      willShowViewController:(UIViewController *)viewController animated:(BOOL)animated {
    if (_lastViewController) {
        [_lastViewController viewWillDisappear:animated];
    }

    [viewController viewWillAppear:animated];
    _lastViewController = viewController;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;If you need support for &lt;code&gt;viewDidAppear&lt;/code&gt; and &lt;code&gt;viewDidDisappear&lt;/code&gt; then
you'd have to implement this method as well:&lt;/p&gt;

&lt;p&gt;```objc&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)navigationController:(UINavigationController *)navigationController 
       didShowViewController:(UIViewController *)viewController 
                    animated:(BOOL)animated;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;After doing this, your view controllers should start receiving the
&lt;code&gt;viewWillAppear:&lt;/code&gt; and &lt;code&gt;viewWillDisappear:&lt;/code&gt; methods successfully.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>My Vim Journey</title>
    <link href="http://benscheirman.com/blog/2011/08/17/my-vim-journey/"/>
    <updated>2011-08-17T23:53:00-05:00</updated>
    <id>http://benscheirman.com/blog/2011/08/17/my-vim-journey</id>
    <content type="html">&lt;p&gt;For my Rails work, I've largely leaned on &lt;a href=&quot;http://macromates.org&quot;&gt;TextMate&lt;/a&gt;.  It's used by many Rubyists, looks sexy,
and is easily extended.&lt;/p&gt;

&lt;p&gt;I still use TextMate frequently, but I've been ramping up on my Vim
skills and I've recently come to a point where I think I'm pretty
productive in it.&lt;/p&gt;

&lt;p&gt;My initial frustrations with Vim were that it was too configurable.
Talk to any Vim power-user and you'll find a completely different set of
plugins &amp;amp; keyboard shortcuts.  If you snag a friend's set of Vim
configuration files (like I did) you might find yourself frustrated that
there's too much to learn and it's difficult to know where various
behaviors are coming from.&lt;/p&gt;

&lt;p&gt;In this post, I'll attempt to demonstrate a very sane Vim setup that
newcomers can use to get started and not be too overwhelmed.&lt;/p&gt;

&lt;h2&gt;Why Vim?&lt;/h2&gt;

&lt;p&gt;Before I get started with the basics of Vim, why would you use it in the
first place?&lt;/p&gt;

&lt;p&gt;For me it boils down to this:  &lt;em&gt;I love staying on the keyboard&lt;/em&gt;.
Vim may not make you faster (&lt;em&gt;in fact initially you'll be a lot slower&lt;/em&gt;) but it can fit your workflow better.&lt;/p&gt;

&lt;p&gt;Another big differentiator of Vim is &lt;em&gt;Command Mode&lt;/em&gt;.  The notion
here is that you spend more time wrangling text rather than creating it
from scratch.  That's certainly true of my code.&lt;/p&gt;

&lt;p&gt;It is important, however, that in the larger software ecosystem,
&lt;em&gt;typing is not the bottleneck&lt;/em&gt;.  Don't expect Vim to make you build
the right software faster.&lt;/p&gt;

&lt;p&gt;Vim enables a keyboard-optimized workflow that &lt;em&gt;may&lt;/em&gt; make you faster.
YMMV.  If you're fast with TextMate or Emacs or don't want to spend the
time to learn something new, then Vim may very well not be for you.&lt;/p&gt;

&lt;p&gt;Lastly, Vim is ubiquitous.  It's on every platform and
you can carry your configuration (or a very large set of it) everywhere.
People frequently put their vim configurations on Github for themselves
and others to utilize.&lt;/p&gt;

&lt;h2&gt;Getting MacVim&lt;/h2&gt;

&lt;p&gt;Almost all Unix-based systems (like Mac) include a terminal version of
Vim.  The version included on OS X isn't compiled with Ruby support, so
some plugins won't work.  In addition, it doesn't have OS-level
integration like Copy &amp;amp; Paste in the same buffer.&lt;/p&gt;

&lt;p&gt;Most Vim users I know use MacVim, which comes pre-compiled with Ruby
support, has tabs, and more.&lt;/p&gt;

&lt;p&gt;If you have &lt;a href=&quot;http://mxcl.github.com/homebrew/&quot;&gt;homebrew&lt;/a&gt; installed, just
type:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
brew install  macvim
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you'd rather grab a pre-built binary, then head on over &lt;a href=&quot;https://github.com/b4winckler/macvim&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You'll also want to make sure that the &lt;code&gt;mvim&lt;/code&gt; binary is in your path.&lt;/p&gt;

&lt;h2&gt;Basic Vim Navigation&lt;/h2&gt;

&lt;p&gt;I won't cover everything you can do in Vim here, but here's just enough
to get you started:&lt;/p&gt;

&lt;p&gt;In Command Mode:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Press &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt; to move the cursor around.  It will feel weird, but you start to appreciate not
lifting your hand off of the home row to reach for the arrow keys.&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;G&lt;/code&gt; to go to the end of a document, &lt;code&gt;gg&lt;/code&gt; to go to the top of
the document.&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;i&lt;/code&gt; to go to insert mode at the current position&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;I&lt;/code&gt; to insert at the beginning of the line&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;a&lt;/code&gt; to &quot;append&quot; content after the cursor&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;A&lt;/code&gt; to &quot;append&quot; content at the end of a line&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;cw&lt;/code&gt; (&quot;change word&quot;) to replace the current word and go into insert mode&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;dta&lt;/code&gt; to (&quot;delete 'til the letter a&quot;) in a line&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In Insert Mode:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Press &lt;code&gt;esc&lt;/code&gt; to go back to command mode.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In Command Mode, you can type commands by prefixing them with &lt;code&gt;:&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To write the changes to the current buffer (save) type &lt;code&gt;:w&lt;/code&gt; and hit
&lt;code&gt;enter&lt;/code&gt;.  Often times you'll write &amp;amp; quit in one command, with &lt;code&gt;:wq&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Feel free to use the mouse &amp;amp; arrow-keys while you're getting used to everything.  It
will feel weird.&lt;/p&gt;

&lt;p&gt;For more Vim-fu, definitely check out this &lt;a href=&quot;http://peepcode.com/products/smash-into-vim-i&quot;&gt;PeepCode
screencast&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Installing a Base Set of Plugins with Janus&lt;/h2&gt;

&lt;p&gt;The real power of Vim is in the plugins, and fortunately Yehuda Katz &amp;amp;
Carl Lerche have put together an opinionated and useful set of plugins
that are pre-configured and work well together.  Take a look at the plugins it includes
&lt;a href=&quot;https://github.com/carlhuda/janus&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Getting Janus installed is easy.  If you are super trust-worthy and
don't mind running a script blindly (I don't recommend it) you can
simply run:&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl https://raw.github.com/carlhuda/janus/master/bootstrap.sh -o - | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;More explicit instructions for the paranoid can be found on &lt;a href=&quot;http://github.com/carlhuda/janus&quot;&gt;the github
page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you have Janus installed, your Vim will be on steroids. Don't worry
though, I'll try to cover the most important things you'll be using.&lt;/p&gt;

&lt;h2&gt;Getting a Decent Theme installed&lt;/h2&gt;

&lt;p&gt;MacVim installs a hundred nasty looking themes, but a few of them are
worth taking a look at.  Here are some that I like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;molokai&lt;/li&gt;
&lt;li&gt;railscasts&lt;/li&gt;
&lt;li&gt;vividchalk&lt;/li&gt;
&lt;li&gt;vibrantink&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you want to install other themes (like this nice &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=2855&quot;&gt;github&lt;/a&gt; one) then you
simply download it &amp;amp; copy the &lt;code&gt;theme.vim&lt;/code&gt; (or whatever the theme is
called) to &lt;code&gt;~/.vim/colors&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To switch between the themes that are installed, you can use the menu,
or you can type &lt;code&gt;:colorscheme &amp;lt;scheme&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To set defaults for your installation, you'd normally add commands to
&lt;code&gt;~/.vimrc&lt;/code&gt; however Janus has taken that file over.  It instead reads
your settings from &lt;code&gt;~/.vimrc.local&lt;/code&gt;.  In order to provide settings for
graphical Vim installations (like MacVim) there's also a &lt;code&gt;~/.gvimrc&lt;/code&gt;
file.&lt;/p&gt;

&lt;p&gt;Open up that file (&lt;code&gt;:edit ~/.gvimrc&lt;/code&gt;) and add the following commands:&lt;/p&gt;

&lt;p&gt;``` vim&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;colorscheme github
set guifont=Menlo:h14
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Feel free to tweak this to contain your favorite color scheme &amp;amp; font.
In order to see these changes you have to &quot;source&quot; the file:&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:source %
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;(&lt;code&gt;%&lt;/code&gt; here means &quot;current file&quot;)&lt;/p&gt;

&lt;p&gt;You should see the changes take effect immediately.&lt;/p&gt;

&lt;h2&gt;Opening MacVim with a &quot;Project&quot;&lt;/h2&gt;

&lt;p&gt;One common thing in TextMate is to &lt;code&gt;cd&lt;/code&gt; into a project and then type
&lt;code&gt;mate .&lt;/code&gt; which will open TextMate's project drawer with all of the files
in that directory loaded up.&lt;/p&gt;

&lt;p&gt;In MacVim, you can do the same.  Navigate to a folder with some content
(like a Rails app) and type: &lt;code&gt;mvim .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should see something resembling a file navigator.  You can navigate
these with the same movement commands from above.&lt;/p&gt;

&lt;p&gt;Once you've chosen a file, press &lt;code&gt;enter&lt;/code&gt; to open it in the buffer.&lt;/p&gt;

&lt;p&gt;&lt;span class='has-pullquote' data-pullquote='The leader key is a special, configurable key used to create quick shortcut combinations.'&gt;
Janus comes with NERDTree, which has similar behavior to TextMate's
Project Drawer.  Open up the NERDTree pane by typing &lt;code&gt;&amp;lt;leader&amp;gt;-n&lt;/code&gt; or &lt;code&gt;\n&lt;/code&gt;. By default the leader key is set to backslash.
The leader key is a special, configurable key used to create quick shortcut combinations.
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The NERDTree window can be collapsed by typing &lt;code&gt;&amp;lt;leader&amp;gt;-n&lt;/code&gt; again.&lt;/p&gt;

&lt;p&gt;You might want to instead find the file by searching for it by name.
For that, the aptly-named Command-T plugin can be hepful.&lt;/p&gt;

&lt;p&gt;Command-T can be activated (by default) with &lt;code&gt;&amp;lt;leader&amp;gt;-t&lt;/code&gt;.  Start typing
and it will auto complete the results.&lt;/p&gt;

&lt;h2&gt;Scared Yet?&lt;/h2&gt;

&lt;p&gt;Writing this reminds me of how hard it was to get started.  I can only
offer some encouragement that with practice, Vim does start to feel like
 you can leverage your fast typing skills to really.&lt;/p&gt;

&lt;p&gt;Practice only a couple of commands at a time.  Really learn what they
are doing and then move one to the next command.  Print out a cheet
sheet.  Pair with someone else who uses Vim.&lt;/p&gt;

&lt;p&gt;I hope you found this intro useful. I'll cover some more Vim tricks as time goes on.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A Fresh Start?</title>
    <link href="http://benscheirman.com/blog/2011/08/17/a-fresh-start/"/>
    <updated>2011-08-17T23:37:00-05:00</updated>
    <id>http://benscheirman.com/blog/2011/08/17/a-fresh-start</id>
    <content type="html">&lt;p&gt;So I've been thinking of ditching the traditional blog for a while now.  My &lt;a href=&quot;http://flux88.com&quot;&gt;current blog&lt;/a&gt; is powered by WordPress, which
is powerful enough, however it always seems like a hassle to maintain.
There are also no fantastic blog editors for the Mac (still).&lt;/p&gt;

&lt;p&gt;This time I'm going in a completely new direction.  This blog is powered
by &lt;a href=&quot;http://octopress.org&quot;&gt;Octopress&lt;/a&gt; (which uses
&lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt; as the engine.  I'm not
going to import old posts and I'm not going to worry about integrating a lot
of features. Just epic content, that's it!&lt;/p&gt;

&lt;p&gt;Posts are composed in Markdown (I'm using vim to write this), static HTML is generated and the blog is then deployed to a git repository.&lt;/p&gt;

&lt;p&gt;Will it make me blog more? I hope so, but only time will tell!&lt;/p&gt;
</content>
  </entry>
  
</feed>
